{"version":3,"sources":["serviceWorker.js","Components/card.js","Components/CardList.js","Components/search.js","Components/Scroll.js","Components/StickHeader.js","Components/ErrorBoundry.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","className","alt","src","CardList","Asu","robots","map","data","Search","onChangeSearch","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","StickyHeader","position","top","width","ErrorBoundry","state","hasError","eroor","info","this","setState","Component","App","readSearchContent","event","searchField","target","value","componentDidMount","fetch","then","response","json","roboData","filterArray","filter","robo","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCHSC,G,YAZF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACnB,OACE,yBAAKC,UAAU,qDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BJ,EAA1B,mBACnB,6BACE,4BAAKA,GACL,2BAAIC,OCCGI,EAPE,SAAC,GAAc,IAEtBC,EAFqB,EAAZC,OAEIC,KAAI,SAACC,GACpB,OAAO,kBAAC,EAAD,CAAMT,KAAMS,EAAKT,KAAMC,MAAQQ,EAAKR,WAE/C,OAAO,6BAAMK,ICMFI,EAZA,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACb,OAAO,yBAAKT,UAAU,OAClB,2BAAOU,KAAM,SACbC,YAAY,gBACZX,UAAU,mCACVY,SAAYH,MCALI,EALD,SAACC,GACX,OAAO,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UAC1CH,EAAMI,WCIAC,EANK,SAACL,GACjB,OAAO,yBAAKC,MAAO,CAACK,SAAS,SAAUC,IAAI,IAAKC,MAAM,SACjDR,EAAMI,WCoBAK,E,YArBX,WAAYT,GAAO,IAAD,8BACd,4CAAMA,KACDU,MAAM,CACPC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAASJ,SAAS,CAACA,UAAU,M,+BAIlC,OAAGG,KAAKJ,MAAMC,SACH,6DAEJG,KAAKd,MAAMI,a,GAhBCY,aCqDZC,E,YA/Cb,aAAc,IAAD,8BACX,+CAQFC,kBAAmB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAVhC,EAaXC,kBAAmB,WACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAC,GAAQ,OAAG,EAAKX,SAAS,CAACa,SAAUF,QAd5C,EAAKhB,MAAM,CACTkB,SAAS,GACTR,YAAY,IAJH,E,sEAmBH,IAAD,OACDS,EAAaf,KAAKJ,MAAMkB,SAASE,QAAO,SAACC,GAC3C,OAAOA,EAAK/C,KAAKgD,cAAcC,SAAS,EAAKvB,MAAMU,YAAYY,kBAEjE,OAA2B,IAAxBlB,KAAKJ,MAAMkB,SACL,6BACL,wBAAI1C,UAAU,MAAd,kBAGK,yBAAKA,UAAU,MACxB,kBAAC,EAAD,KACA,qDACA,kBAAC,EAAD,CAAQS,eAAiBmB,KAAKI,oBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQsC,Y,GAnCVb,aCDlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SR2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.6b4a6504.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst Card = ({name, email}) => {\r\n  return (\r\n    <div className=\"bg-light-red dib br3 pa3 ma3 grow bw2 shadow-5 tc\">\r\n      <img alt=\"robo\" src={`https://robohash.org/${name}?size=200x200` }/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card.js';\r\n\r\nconst CardList = ({robots}) => {\r\n \r\n    const Asu = robots.map((data) =>{\r\n        return <Card name={data.name} email= {data.email} />;\r\n    })\r\n    return <div>{Asu}</div>;\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Search = ({onChangeSearch}) => {\r\n    return <div className=\"pa2\"> \r\n        <input type= \"search\" \r\n        placeholder=\"Search Player\" \r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        onChange = {onChangeSearch}\r\n        />\r\n        \r\n    </div>;\r\n    \r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return <div style={{overflowY:\"scroll\", height:\"720px\"}}>\r\n        {props.children}\r\n    </div>\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst StickyHeader =(props)=>{\r\n    return <div style={{position:\"sticky\", top:\"0\", width:\"100%\"}}>\r\n        {props.children}\r\n    </div>\r\n}\r\n\r\nexport default StickyHeader;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }    \r\n    }\r\n\r\n    componentDidCatch(eroor, info){\r\n        this.setState.hasError({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Something went erong our side</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport '../CSS/App.css';\nimport CardList from '../Components/CardList'\nimport Search from '../Components/search'\nimport Scroll from '../Components/Scroll'\nimport StickyHeader from '../Components/StickHeader'\nimport ErrorBoundry from '../Components/ErrorBoundry'\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      roboData:[],   \n      searchField:\"\"\n    }\n    \n   \n  }\n  readSearchContent= (event)=>{\n      this.setState({searchField: event.target.value})\n  \n    }\n    componentDidMount =()=>{\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(response=> this.setState({roboData: response}))\n    }\n          \n  render() {\n    const filterArray= this.state.roboData.filter((robo)=>{\n        return robo.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n      })\n      if(this.state.roboData === 0){\n        return <div>\n          <h1 className=\"tc\">Fetching data</h1>\n        </div>\n      }else {\n        return <div className=\"tc\">\n      <StickyHeader>   \n      <h1>Robo War Participants</h1>\n      <Search onChangeSearch= {this.readSearchContent}/> \n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filterArray}/>\n        </ErrorBoundry>\n      </Scroll>\n      </StickyHeader> \n      \n    </div>;\n      }    \n    \n  }\n\n \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}